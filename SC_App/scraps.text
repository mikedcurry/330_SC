 class API(object):
    """Generic API wrapper object.
    """
    def __init__(self, **kwargs):
        self._key       = kwargs.pop('key', '')
        self._pswd      = kwargs.pop('pswd', '')
        self._version   = kwargs.pop('version', None)
        self._baseurl   = kwargs.pop('baseurl', None)
        self._headers   = {'content-type': 'application/json'}

    def _make_url(self, endpoint, **kwargs):
        """Internal method to create a url from an endpoint.
        :param endpoint: Endpoint for an API call
        :type endpoint: string
        :returns: url
        """
        endpoint = "{}/{}/{}".format(self._baseurl, self._version, endpoint)

        extra = []
        for key, value in kwargs.items():
            if isinstance(value, list) or isinstance(value, tuple):
                #value = ','.join(value)
                for v in value:
                    extra.append("{}={}".format(key, v))
            else:
                extra.append("{}={}".format(key, value))

        if len(extra) > 0:
            endpoint = '?'.join([endpoint, '&'.join(extra)])

        return endpoint

    def _send(self, endpoint, method='GET', **kwargs):
        return resp.status_code, res

    def _get(self, url, **kwargs):
        return self._send(url, 'GET', **kwargs)

class OpenAQ(API):
    """Create an instance of the OpenAQ API
    """
    def __init__(self, version='v1', **kwargs):
        """Initialize the OpenAQ instance.

        :param version: API version.
        :param kwargs: API options.

        :type version: string
        :type kwargs: dictionary

        """
        self._baseurl = 'https://api.openaq.org'
        super(OpenAQ, self).__init__(version=version, baseurl=self._baseurl)

    def cities(self, **kwargs):  
        return self._get('cities', **kwargs)

    def countries(self, **kwargs):
        return self._get('countries', **kwargs)

    def latest(self, **kwargs): 
        return self._get('latest', **kwargs)

    def locations(self, **kwargs):
        return self._get('locations', **kwargs)

    def measurements(self, **kwargs):
        return self._get('measurements', **kwargs)

    def fetches(self, **kwargs):
        return self._get('fetches', **kwargs)

    def parameters(self, **kwargs):
        return self._get('parameters', **kwargs)

    def sources(self, **kwargs):
        return self._get('sources', **kwargs)    

    
